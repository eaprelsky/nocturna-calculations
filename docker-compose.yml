version: '3.8'

services:
  # Main application service
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nocturna-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-nocturna}
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-30}
      # User management (service component settings)
      - ALLOW_USER_REGISTRATION=${ALLOW_USER_REGISTRATION:-false}
      - REGISTRATION_REQUIRES_APPROVAL=${REGISTRATION_REQUIRES_APPROVAL:-true}
      - MAX_USERS_LIMIT=${MAX_USERS_LIMIT:-100}
      # API configuration
      - PROJECT_NAME=Nocturna Calculations Service
      - API_VERSION_PREFIX=/v1
      # CORS origins
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000"]}
      # Rate limiting
      - RATE_LIMIT_DEFAULT=${RATE_LIMIT_DEFAULT:-1000}
      - RATE_LIMIT_PREMIUM=${RATE_LIMIT_PREMIUM:-10000}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-3600}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nocturna-network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: nocturna-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-nocturna}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db_init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nocturna}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - nocturna-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: nocturna-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - nocturna-network

  # Database migrations (init container)
  migrations:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nocturna-migrations
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-nocturna}
    depends_on:
      db:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    networks:
      - nocturna-network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  nocturna-network:
    driver: bridge 